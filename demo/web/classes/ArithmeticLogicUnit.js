const unifyTypes = require("../funcs/unifyTypes.js");

module.exports = class {
  constructor() {
    this.flags = [];
  }
  add(operand1, operand2, readMethod) {
    const { op1, op2 } = unifyTypes(operand1, operand2, readMethod);
    return op1 + op2;
  }
  subtract(operand1, operand2, readMethod) {
    const { op1, op2 } = unifyTypes(operand1, operand2, readMethod);
    return op1 - op2;
  }
  multiply(operand1, operand2, readMethod) {
    const { op1, op2 } = unifyTypes(operand1, operand2, readMethod);
    return op1 * op2;
  }
  divide(operand1, operand2, readMethod) {
    const { op1, op2 } = unifyTypes(operand1, operand2, readMethod);
    return op1 / op2;
  }
  remainder(operand1, operand2, readMethod) {
    const { op1, op2 } = unifyTypes(operand1, operand2, readMethod);
    return op1 % op2;
  }
  and(operand1, operand2, readMethod) {
    const { op1, op2 } = unifyTypes(operand1, operand2, readMethod);
    return op1 & op2;
  }
  or(operand1, operand2, readMethod) {
    const { op1, op2 } = unifyTypes(operand1, operand2, readMethod);
    return op1 | op2;
  }
  xor(operand1, operand2, readMethod) {
    const { op1, op2 } = unifyTypes(operand1, operand2, readMethod);
    return op1 ^ op2;
  }
  andNot(operand1, readMethod) {
    const op1 = operand1.read(readMethod);
    return ~op1;
  }
  shiftL(operand1, operand2, readMethod) {
    const { op1, op2 } = unifyTypes(operand1, operand2, readMethod);
    return op1 << op2;
  }
  shiftR(operand1, operand2, readMethod) {
    const { op1, op2 } = unifyTypes(operand1, operand2, readMethod);
    return op1 >> op2;
  }
};
