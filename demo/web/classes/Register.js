function printHexStr(arr) {
  return Array.from(arr)
    .map((x) => {
      return x.toString(16).padStart(2, "0");
    })
    .join(" ");
}
module.exports = class {
  constructor(buffer, offset, bits) {
    this.bits = bits;
    this.bytes = bits / 8;
    this.buffer = buffer;
    this.view = new DataView(this.buffer, offset, this.bytes);
    this.offset = offset;
    if (this.bytes == 1) {
      this.readMethods = {
        signed: "getUint8",
        unsigned: "getInt8",
        float: "getFloat8",
      };
      this.writeMethods = {
        signed: "setUint8",
        unsigned: "setInt8",
        float: "setFloat8",
      };
    }
    if (this.bytes == 2) {
      this.readMethods = {
        signed: "getUint16",
        unsigned: "getInt16",
        float: "getFloat16",
      };
      this.writeMethods = {
        signed: "setUint16",
        unsigned: "setInt16",
        float: "setFloat16",
      };
    }
    if (this.bytes == 4) {
      this.readMethods = {
        signed: "getUint32",
        unsigned: "getInt32",
        float: "getFloat32",
      };
      this.writeMethods = {
        signed: "setUint32",
        unsigned: "setInt32",
        float: "setFloat32",
      };
    }
    if (this.bytes == 8) {
      this.readMethods = {
        signed: "getUBigInt64",
        unsigned: "getBigUint64",
        float: "getFloat64",
      };
      this.writeMethods = {
        signed: "setUBigInt64",
        unsigned: "setBigUint64",
        float: "setFloat64",
      };
    }
  }
  print(readMethod = "unsigned") {
    let arr = [];
    for (let i = 0; i < this.bytes; i++) {
      arr.push(this.view.getUint8(i));
    }
    //console.log("printing", this.view, ":", arr);
    return printHexStr(arr);
  }
  read(readMethod = "unsigned") {
    return this.view[this.readMethods[readMethod]](0);
  }
  write(value, writeMethod = "unsigned") {
    if (this.bytes === 8) value = BigInt(value);
    this.view[this.writeMethods[writeMethod]](0, value);
  }
};
