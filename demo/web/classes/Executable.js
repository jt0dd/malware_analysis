const fs = require("fs");
const executableMetadata = require("executable-metadata");
const MicrosoftPe = require("../../node/classes/MicrosoftPe.js");
const opCodes = require("../objects/opCodes.js");
const maxBigUint = 2n ** 64n - 1n;
const { GPU } = require("gpu.js");
const { KaitaiStream } = require("kaitai-struct");

module.exports = class {
  constructor(fileTarget) {
    this.fileTarget = fileTarget;
    /*
    const PEProps = [
      "OptionalHeaderDataDirs",
      "DataDir",
      "CoffSymbol",
      "OptionalHeader",
      "Section",
      "OptionalHeaderStd",
      "CoffHeader",
    ];
    */
    this.gpu = new GPU({
      // mode: 'cpu'
    });
    this.kernel = this.gpu.createKernel(function (x) {
      return x[this.thread.x] + 1;
    });
    //.setOutput([data.length]);
    //console.log('result', kernel(data));
  }
  load() {
    return new Promise((resolve) => {
      executableMetadata
        .getMetadataObjectFromExecutableFilePath_Async(this.fileTarget)
        .then((metadata) => {
          this.metadata = metadata;
          fs.promises.readFile(this.fileTarget).then((data) => {
            const kStream = new KaitaiStream(data);
            this.data = data;
            this.peData = new MicrosoftPe(kStream).pe;
            this.textSegment = this.peData.sections[0].body;
            resolve();
          });
        });
    });
  }
  segment(mode = "cpu") {
    if (mode === "cpu") {
    } else if (mode === "gpu") {
      // future optimization
    } else {
      throw "bad synthesize mode param: " + mode;
    }
  }
  synthesize(mode = "cpu") {
    if (mode === "cpu") {
    } else if (mode === "gpu") {
      // future optimization
    } else {
      throw "bad synthesize mode param: " + mode;
    }
  }
};
